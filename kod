import random
import json
import os
import asyncio
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = ''
SPAM_COOLDOWN = 5  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –≤—ã—Å—Ç—Ä–µ–ª–∞–º–∏
TOP_COUNT = 10

# === –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–´ ===
ADMINS = ['']  # –¢–≤–æ–π ID –∞–¥–º–∏–Ω–∞

# üìÅ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = 'roulette_stats.json'

# üéÆ –≠–º–æ–¥–∑–∏
BULLET = "üí•"
EMPTY = "üî´"
REVOLVER = "ü™É"
CROWN = "üëë"
# üé∞ –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ 7Ô∏è‚É£)
SLOT_ITEMS = ["üçí", "üçã", "üçâ", "üçä", "üîî", "üíé", "7Ô∏è‚É£", "7Ô∏è‚É£", "7Ô∏è‚É£"]

# === –°–ú–´–°–õ–û–í–´–ï –ì–†–£–ü–ü–´ –§–†–ê–ó (–ë–ï–ó –ú–ï–ú–û–í) ===

# ‚úÖ –í–´–ñ–ò–í–ê–ù–ò–ï
SURVIVAL_PHRASES = [
    "–ü–æ–≤–µ–∑–ª–æ, –∫–∞–∫ –≤ –ª–æ—Ç–µ—Ä–µ–µ! –°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å! üçÄ",
    "–§–æ—Ä—Ç—É–Ω–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å —Ç–µ–±–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
    "–¢—ã –Ω–∞ –≤–æ–ª–Ω–µ —É–¥–∞—á–∏ ‚Äî –¥–µ—Ä–∂–∏—Å—å –∫—Ä–µ–ø—á–µ!",
    "–°–µ–≥–æ–¥–Ω—è –∑–≤—ë–∑–¥—ã —Å–æ—à–ª–∏—Å—å –≤ —Ç–≤–æ—é –ø–æ–ª—å–∑—É! ‚ú®",
    "–¢—ã –∫–∞–∫ –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π ‚Äî —Å–º–µ—Ä—Ç—å –æ–±—Ö–æ–¥–∏—Ç —Ç–µ–±—è —Å—Ç–æ—Ä–æ–Ω–æ–π.",
]

# üíÄ "–°–ú–ï–†–¢–¨"
DEATH_PHRASES = [
    "–ë–ê–•! –°—É–¥—å–±–∞ —Ä–µ—à–µ–Ω–∞. –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª.",
    "–¢—ã —É—Å–ª—ã—à–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤—É–∫ –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏...",
    "–û–¥–∏–Ω –≤—ã—Å—Ç—Ä–µ–ª. –û–¥–Ω–æ –º–≥–Ω–æ–≤–µ–Ω–∏–µ. –ö–æ–Ω–µ—Ü.",
    "–¢—ã —É–º–µ—Ä. –ú–∏—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –±–µ–∑ —Ç–µ–±—è.",
    "–°–º–µ—Ä—Ç—å –ø—Ä–∏—à–ª–∞ —Ç–∏—Ö–æ. –ù–æ –Ω–∞–≤—Å–µ–≥–¥–∞.",
]

# === –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º ===
def load_stats():
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (json.JSONDecodeError, PermissionError):
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è stats.json. –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
            return {}
    return {}

def save_stats(data):
    try:
        with open(STATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
STATS = load_stats()

# === –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ===
def get_user_stats(user_id):
    user_id = str(user_id)
    if user_id not in STATS:
        STATS[user_id] = {
            'shots': 0,
            'deaths': 0,
            'survivals': 0,
            'slots_plays': 0,
            'slots_wins': 0,
            'slots_losses': 0,
            'coins': 50000,  # –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 50,000 –º–æ–Ω–µ—Ç
            'inventory': {},  # –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {item_id: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ}
            'username': None,
            'first_play': datetime.now().isoformat(),
            'last_shot': None
        }
    return STATS[user_id]

def update_username(user_id, username):
    user_id = str(user_id)
    if username and user_id in STATS:
        STATS[user_id]['username'] = username

def get_display_name(user):
    return user.username or user.first_name or f"–ò–≥—Ä–æ–∫ {user.id}"

def is_on_cooldown(user_id):
    user_data = get_user_stats(user_id)
    last = user_data.get('last_shot')
    if last:
        last_time = datetime.fromisoformat(last)
        now = datetime.now()
        if now - last_time < timedelta(seconds=SPAM_COOLDOWN):
            return True
    return False

def update_last_shot(user_id):
    STATS[str(user_id)]['last_shot'] = datetime.now().isoformat()

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    get_user_stats(user_id)
    update_username(user_id, user.username)

    await update.message.reply_text(
        f"üî´ –ü—Ä–∏–≤–µ—Ç, {get_display_name(user)}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É*.\n\n"
        f"‚Ä¢ /shoot ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞—á—É (—Ä–∞–∑ –≤ {SPAM_COOLDOWN} —Å–µ–∫)\n"
        "‚Ä¢ /slots ‚Äî —Å—ã–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã üé∞\n"
        "‚Ä¢ /stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /top ‚Äî –ª—É—á—à–∏–µ –≤—ã–∂–∏–≤–∞–ª—å—â–∏–∫–∏ –∏ –±–æ–≥–∞—á–∏\n"
        "‚Ä¢ /rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä\n"
        "‚Ä¢ /menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –∏–≥—Ä–∞. –ù–∏–∫—Ç–æ –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–∏.",
        parse_mode='Markdown'
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["/shoot", "/slots"],
        ["/stats", "/top"],
        ["/balance", "/shop"],
        ["/inv", "/rules"],
        ["/menu"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üéÆ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* –±–æ—Ç–∞:\n\n"
        "üî´ /shoot ‚Äî –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞\n"
        "üé∞ /slots ‚Äî –ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã\n"
        "üìä /stats ‚Äî –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üí∞ /balance ‚Äî –¢–≤–æ–π –±–∞–ª–∞–Ω—Å\n"
        "üè™ /shop ‚Äî –ú–∞–≥–∞–∑–∏–Ω\n"
        "üéí /inv ‚Äî –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n"
        "üèÜ /top ‚Äî –õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏\n"
        "üìú /rules ‚Äî –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä\n"
        "üîÑ /menu ‚Äî –í–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞\n\n"
        "_–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ_",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def shoot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    get_user_stats(user_id)
    update_username(user_id, user.username)

    if is_on_cooldown(user_id):
        await update.message.reply_text(
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ! –ú–æ–∂–Ω–æ —Å—Ç—Ä–µ–ª—è—Ç—å —Ä–∞–∑ –≤ {SPAM_COOLDOWN} —Å–µ–∫—É–Ω–¥."
        )
        return

    # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ
    reward = 250

    # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à–∞–Ω—Å –≤—ã–∂–∏—Ç—å: 2 –∏–∑ 3 (66%)
    chamber = random.randint(1, 3)
    stats = get_user_stats(user_id)
    stats['shots'] += 1
    update_last_shot(user_id)
    save_stats(STATS)

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê:
    # chamber = 1 ‚Üí –°–ú–ï–†–¢–¨ (33%)
    # chamber = 2, 3 ‚Üí –í–´–ñ–ò–õ (66%)
    if chamber == 1:
        stats['deaths'] += 1
        phrase = random.choice(DEATH_PHRASES)
        result = f"{BULLET} *{phrase}* üíÄ"
        image = "https://c.tenor.com/I6kN-6X7nhAAAAAd/rickroll-roll.gif"
        
        await update.message.reply_text(result, parse_mode='Markdown')
        try:
            await update.message.reply_animation(image)
        except:
            pass
    else:
        stats['survivals'] += 1
        # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ
        stats['coins'] = stats.get('coins', 50000) + reward
        
        phrase = random.choice(SURVIVAL_PHRASES)
        result = f"{EMPTY} *{phrase}* üòÖ\n\nüí∞ –¢—ã –≤—ã–∂–∏–ª –∏ –ø–æ–ª—É—á–∏–ª {reward} –º–æ–Ω–µ—Ç!\nüí≥ –ë–∞–ª–∞–Ω—Å: {stats['coins']} –º–æ–Ω–µ—Ç"
        image = "https://c.tenor.com/gYrHV0OAmHIAAAAC/survivor-survived.gif"

        await update.message.reply_text(result, parse_mode='Markdown')
        try:
            await update.message.reply_animation(image)
        except:
            pass

    save_stats(STATS)

async def slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    stats = get_user_stats(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
    auto_mode = False
    auto_count = 1
    bet = 1

    if context.args:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "auto" –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
        if "auto" in context.args:
            try:
                auto_index = context.args.index("auto")
                auto_count = int(context.args[auto_index - 1]) if auto_index > 0 else 1
                bet = int(context.args[0]) if auto_index > 0 else 1
                auto_mode = True
                if auto_count < 1 or auto_count > 100:
                    await update.message.reply_text("–ê–≤—Ç–æ-—Ä–µ–∂–∏–º: –æ—Ç 1 –¥–æ 100 –∏–≥—Ä.")
                    return
            except (ValueError, IndexError):
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: `/slots <—Å—Ç–∞–≤–∫–∞> auto` –∏–ª–∏ `/slots <—Å—Ç–∞–≤–∫–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> auto`", parse_mode='Markdown')
                return
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
            try:
                bet = int(context.args[0])
            except ValueError:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: `/slots <—Å—Ç–∞–≤–∫–∞>`", parse_mode='Markdown')
                return

    if bet < 1:
        await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 1 –º–æ–Ω–µ—Ç–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–∞
    total_cost = bet * (auto_count if auto_mode else 1)
    coins = stats.get('coins', 50000)
    if coins < total_cost:
        await update.message.reply_text(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ {total_cost}, —É —Ç–µ–±—è {coins}.")
        return

    # –°–Ω–∏–º–∞–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã —Å—Ä–∞–∑—É
    stats['coins'] = coins - total_cost

    if auto_mode:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        results = []
        wins = 0
        total_won = 0

        msg = await update.message.reply_text(f"üé∞ –ê–≤—Ç–æ-—Å–ª–æ—Ç—ã: {auto_count} –∏–≥—Ä...")

        for i in range(auto_count):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = [random.choice(SLOT_ITEMS) for _ in range(3)]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
            win_amount = 0
            if len(set(result)) == 1:  # –í—Å–µ 3 —Å–∏–º–≤–æ–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                symbol = result[0]
                if symbol == "üíé":
                    win_amount = bet * 5
                elif symbol == "7Ô∏è‚É£":
                    win_amount = bet * 20
                else:
                    win_amount = bet * 3
                
                wins += 1
                total_won += win_amount
            
            results.append((result, win_amount))
            stats['slots_plays'] = stats.get('slots_plays', 0) + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –∏–≥—Ä –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ
            if (i + 1) % 10 == 0 or (i + 1) == auto_count:
                await msg.edit_text(f"üé∞ –ê–≤—Ç–æ-—Å–ª–æ—Ç—ã: {i + 1}/{auto_count}...")

        # –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤
        stats['coins'] += total_won
        stats['slots_wins'] = stats.get('slots_wins', 0) + wins
        stats['slots_losses'] = stats.get('slots_losses', 0) + (auto_count - wins)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        win_rate = (wins / auto_count * 100) if auto_count > 0 else 0
        report = f"üé∞ *–ê–≤—Ç–æ-—Å–ª–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!*\n\n"
        report += f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {auto_count}\n"
        report += f"‚úÖ –í—ã–∏–≥—Ä—ã—à–µ–π: {wins}\n"
        report += f"üü• –ü—Ä–æ–∏–≥—Ä—ã—à–µ–π: {auto_count - wins}\n"
        report += f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n"
        report += f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_cost} –º–æ–Ω–µ—Ç\n"
        report += f"üíµ –í—ã–∏–≥—Ä–∞–Ω–æ: {total_won} –º–æ–Ω–µ—Ç\n"
        report += f"üí≥ –ò—Ç–æ–≥: {'+' if total_won - total_cost >= 0 else ''}{total_won - total_cost} –º–æ–Ω–µ—Ç\n"
        report += f"üè¶ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {stats['coins']} –º–æ–Ω–µ—Ç"

        await msg.edit_text(report, parse_mode='Markdown')

    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        msg = await update.message.reply_text("üé∞ –ö—Ä—É—á—É —Å–ª–æ—Ç—ã...")

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        for i in range(3):
            await asyncio.sleep(0.5)
            await msg.edit_text(f"üé∞ –ö—Ä—É—á—É —Å–ª–æ—Ç—ã{'.' * (i+1)}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = [random.choice(SLOT_ITEMS) for _ in range(3)]
        display = " ".join(result)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats['slots_plays'] = stats.get('slots_plays', 0) + 1

        win_multiplier = 0
        win_reason = ""

        if len(set(result)) == 1:  # –í—Å–µ 3 —Å–∏–º–≤–æ–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            symbol = result[0]
            if symbol == "üíé":
                win_multiplier = 5
                win_reason = "–¢—Ä–∏ –∞–ª–º–∞–∑–∞! üíéüíéüíé"
            elif symbol == "7Ô∏è‚É£":
                win_multiplier = 20
                win_reason = "–î–ñ–ï–ö–ü–û–¢! 7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£"
            else:
                win_multiplier = 3
                win_reason = f"–¢—Ä–∏ {symbol}!"

            win_amount = bet * win_multiplier
            stats['coins'] += win_amount
            stats['slots_wins'] = stats.get('slots_wins', 0) + 1

            await msg.edit_text(
                f"üéâ *–ü–û–ë–ï–î–ê!* üéâ\n\n"
                f"{display}\n\n"
                f"üí• {win_reason}\n"
                f"üí∞ –¢—ã –≤—ã–∏–≥—Ä–∞–ª: {win_amount} –º–æ–Ω–µ—Ç!\n"
                f"üí≥ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {stats['coins']} –º–æ–Ω–µ—Ç\n"
                f"üìå –≠—Ç–æ —Ç–≤–æ–π {stats['slots_wins']}-–π –≤—ã–∏–≥—Ä—ã—à!",
                parse_mode='Markdown'
            )
        else:
            stats['slots_losses'] = stats.get('slots_losses', 0) + 1
            await msg.edit_text(
                f"üü• *–ü—Ä–æ–∏–≥—Ä—ã—à*\n\n"
                f"{display}\n\n"
                f"üìâ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {bet} –º–æ–Ω–µ—Ç.\n"
                f"üí≥ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {stats['coins']} –º–æ–Ω–µ—Ç\n"
                f"–ü–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! üòâ",
                parse_mode='Markdown'
            )

    save_stats(STATS)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    stats = get_user_stats(user_id)
    coins = stats.get('coins', 50000)
    await update.message.reply_text(
        f"üí∞ *–¢–≤–æ–π –±–∞–ª–∞–Ω—Å*: {coins} –º–æ–Ω–µ—Ç",
        parse_mode='Markdown'
    )

async def givecoins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if admin_id not in ADMINS:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: `/givecoins <user_id> <amount>`", parse_mode='Markdown')
        return

    try:
        target_user_id = context.args[0]
        amount = int(context.args[1])
        
        if amount <= 0:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_user_id not in STATS:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
        STATS[target_user_id]['coins'] = STATS[target_user_id].get('coins', 50000) + amount
        save_stats(STATS)
        
        username = STATS[target_user_id].get('username', f"–ò–≥—Ä–æ–∫ {target_user_id}")
        await update.message.reply_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ!\n"
            f"üí∞ –ò–≥—Ä–æ–∫—É {username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç.\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {STATS[target_user_id]['coins']} –º–æ–Ω–µ—Ç"
        )
        
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    stats = get_user_stats(user_id)
    coins = stats.get('coins', 50000)

    message = f"üè™ *–ú–∞–≥–∞–∑–∏–Ω*\n"
    message += f"üí∞ –£ —Ç–µ–±—è: {coins} –º–æ–Ω–µ—Ç\n\n"
    message += "üõçÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:*\n\n"

    keyboard = [
        [InlineKeyboardButton("üî´ –ó–æ–ª–æ—Ç–æ–π —Ä–µ–≤–æ–ª—å–≤–µ—Ä (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data="gun")],
        [InlineKeyboardButton("üíé –ö—Ä–∏—Å—Ç–∞–ª–ª —É–¥–∞—á–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data="crystal")],
        [InlineKeyboardButton("üõ°Ô∏è –ê–º—É–ª–µ—Ç –∑–∞—â–∏—Ç—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data="amulet")],
        [InlineKeyboardButton("üéÅ –ú–µ—à–æ–∫ —Å –º–æ–Ω–µ—Ç–∞–º–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", callback_data="bag")],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_shop")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def inv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    stats = get_user_stats(user_id)
    inventory = stats.get('inventory', {})
    
    if not inventory:
        await update.message.reply_text(
            "üéí *–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç* üéí\n\n"
            "–ü–æ—Å–µ—Ç–∏ /shop, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)!",
            parse_mode='Markdown'
        )
        return
    
    message = "üéí *–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å* üéí\n\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    item_descriptions = {
        "gun": "üî´ –ó–æ–ª–æ—Ç–æ–π —Ä–µ–≤–æ–ª—å–≤–µ—Ä",
        "crystal": "üíé –ö—Ä–∏—Å—Ç–∞–ª–ª —É–¥–∞—á–∏",
        "amulet": "üõ°Ô∏è –ê–º—É–ª–µ—Ç –∑–∞—â–∏—Ç—ã",
        "bag": "üéÅ –ú–µ—à–æ–∫ —Å –º–æ–Ω–µ—Ç–∞–º–∏"
    }
    
    for item_id, quantity in inventory.items():
        if quantity > 0:
            item_name = item_descriptions.get(item_id, f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç ({item_id})")
            message += f"‚Ä¢ {item_name} ‚Äî {quantity} —à—Ç.\n"
    
    if not any(quantity > 0 for quantity in inventory.values()):
        message = "üéí *–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç* üéí\n\n–ü–æ—Å–µ—Ç–∏ /shop, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)!"
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìú *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –±–æ—Ç–µ*\n\n"
        "üî´ *–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /shoot ‚Äî 2 –∏–∑ 3 —à–∞–Ω—Å–æ–≤ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ (66%)\n"
        "‚Ä¢ –†–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥ –º–æ–∂–Ω–æ —Å—Ç—Ä–µ–ª—è—Ç—å\n"
        "‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –≤—ã—Å—Ç—Ä–µ–ª, –≥–¥–µ —Ç—ã –≤—ã–∂–∏–ª ‚Äî –ø–æ–ª—É—á–∞–µ—à—å 250 –º–æ–Ω–µ—Ç\n"
        "‚Ä¢ –í—ã–∂–∏–≤–∞–π –∏ –ø–æ–¥–Ω–∏–º–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!\n\n"
        "üé∞ *–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π `/slots <—Å—Ç–∞–≤–∫–∞>` ‚Äî —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π `/slots <—Å—Ç–∞–≤–∫–∞> auto` ‚Äî –∞–≤—Ç–æ-—Ä–µ–∂–∏–º (1 –∏–≥—Ä–∞)\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π `/slots <—Å—Ç–∞–≤–∫–∞> <–∫–æ–ª-–≤–æ> auto` ‚Äî –∞–≤—Ç–æ-—Ä–µ–∂–∏–º (–¥–æ 100 –∏–≥—Ä)\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 –º–æ–Ω–µ—Ç–∞\n"
        "‚Ä¢ –í—ã–∏–≥—Ä—ã—à–∏:\n"
        "  ‚Ä¢ 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ ‚Üí √ó3 —Å—Ç–∞–≤–∫–∏\n"
        "  ‚Ä¢ 3 üíé ‚Üí √ó5 —Å—Ç–∞–≤–∫–∏\n"
        "  ‚Ä¢ 3 7Ô∏è‚É£ ‚Üí √ó20 —Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ ‚Äî *–ø—Ä–æ–∏–≥—Ä—ã—à*\n\n"
        "üí∞ *–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞*\n"
        "‚Ä¢ –ù–æ–≤—ã–º –∏–≥—Ä–æ–∫–∞–º –≤—ã–¥–∞—ë—Ç—Å—è 50,000 –º–æ–Ω–µ—Ç\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /balance ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n\n"
        "üè™ *–ú–∞–≥–∞–∑–∏–Ω –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /shop ‚Äî –∫—É–ø–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π /inv ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π —Å—Ç–∞—Ç—å –ª—É—á—à–∏–º!",
        parse_mode='Markdown'
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    get_user_stats(user_id)
    stats = get_user_stats(user_id)

    name = get_display_name(update.effective_user)
    coins = stats.get('coins', 50000)
    total_shots = stats.get('shots', 0)
    total_slots = stats.get('slots_plays', 0)
    survival_rate = (stats.get('survivals', 0) / total_shots * 100) if total_shots > 0 else 0
    slots_win_rate = (stats.get('slots_wins', 0) / total_slots * 100) if total_slots > 0 else 0

    message = f"üë§ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:* {name}\n"
    message += f"üí∞ *–ë–∞–ª–∞–Ω—Å*: {coins} –º–æ–Ω–µ—Ç\n\n"

    if total_shots > 0:
        message += (
            f"üî´ *–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤: {total_shots}\n"
            f"‚Ä¢ –í—ã–∂–∏–≤–∞–Ω–∏–π: {stats.get('survivals', 0)}\n"
            f"‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats.get('deaths', 0)}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∂–∏–≤–∞–Ω–∏—è: {survival_rate:.1f}%\n\n"
        )
    else:
        message += "üî´ –¢—ã –Ω–µ –∏–≥—Ä–∞–ª –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É\n\n"

    if total_slots > 0:
        message += (
            f"üé∞ *–°–ª–æ—Ç—ã*\n"
            f"‚Ä¢ –°—ã–≥—Ä–∞–Ω–æ: {total_slots}\n"
            f"‚Ä¢ –ü–æ–±–µ–¥: {stats.get('slots_wins', 0)}\n"
            f"‚Ä¢ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats.get('slots_losses', 0)}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {slots_win_rate:.1f}%\n\n"
        )
    else:
        message += "üé∞ –¢—ã –Ω–µ –∏–≥—Ä–∞–ª –≤ —Å–ª–æ—Ç—ã\n\n"

    message += "‚è± –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã—Å—Ç—Ä–µ–ª: –Ω–µ–¥–∞–≤–Ω–æ"

    await update.message.reply_text(message, parse_mode='Markdown')

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not STATS:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª. –ù–∞—á–Ω–∏ –ø–µ—Ä–≤—ã–º ‚Äî /shoot!")
        return

    # –¢–æ–ø –ø–æ –≤—ã–∂–∏–≤–∞–Ω–∏—è–º
    active_roulette = {uid: d for uid, d in STATS.items() if d.get('shots', 0) > 0}
    if active_roulette:
        sorted_roulette = sorted(active_roulette.items(), key=lambda x: x[1].get('survivals', 0), reverse=True)
        roulette_text = f"{CROWN} *–¢–æ–ø-{TOP_COUNT} –≤—ã–∂–∏–≤–∞–ª—å—â–∏–∫–æ–≤* {CROWN}\n\n"
        for i, (uid, data) in enumerate(sorted_roulette[:TOP_COUNT], 1):
            rate = (data.get('survivals', 0) / data.get('shots', 1) * 100)
            name = data.get('username') or f"–ò–≥—Ä–æ–∫ {uid}"
            roulette_text += f"{i}. `{name}` ‚Äî ‚úÖ {data.get('survivals', 0)} –≤—ã–∂–∏–≤–∞–Ω–∏–π ({rate:.0f}%)\n"
    else:
        roulette_text = f"{CROWN} *–¢–æ–ø –≤—ã–∂–∏–≤–∞–ª—å—â–∏–∫–æ–≤* {CROWN}\n\n–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª.\n\n"

    # –¢–æ–ø –±–æ–≥–∞—á–µ–π
    sorted_rich = sorted(STATS.items(), key=lambda x: x[1].get('coins', 0), reverse=True)
    rich_text = f"üí∞ *–¢–æ–ø-{TOP_COUNT} –±–æ–≥–∞—á–µ–π* üí∞\n\n"
    for i, (uid, data) in enumerate(sorted_rich[:TOP_COUNT], 1):
        coins = data.get('coins', 0)
        name = data.get('username') or f"–ò–≥—Ä–æ–∫ {uid}"
        rich_text += f"{i}. `{name}` ‚Äî {coins} –º–æ–Ω–µ—Ç\n"

    message = roulette_text + "\n" + rich_text
    await update.message.reply_text(message, parse_mode='Markdown')

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    print("üé≤ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...")
    
    app = ApplicationBuilder().token(TOKEN).build()

    # –í—Å–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("shoot", shoot))
    app.add_handler(CommandHandler("slots", slots))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("givecoins", givecoins))
    app.add_handler(CommandHandler("shop", shop))
    app.add_handler(CommandHandler("inv", inv))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("top", top))

    try:
        app.run_polling()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        save_stats(STATS)
        print("‚úÖ –ì–æ—Ç–æ–≤–æ.")